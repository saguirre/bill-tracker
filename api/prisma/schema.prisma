// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserGroup {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bills        Bill[]
  members      User[]
  notification Notification[]
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  name               String?
  password           String
  phone              String?
  countryCode        String?
  notifications      Boolean        @default(true)
  inAppNotifications Boolean        @default(true)
  emailNotifications Boolean        @default(true)
  smsNotifications   Boolean        @default(false)
  usageStatistics    Boolean        @default(true)
  bills              Bill[]
  profile            Profile?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  userGroup          UserGroup?     @relation(fields: [userGroupId], references: [id])
  userGroupId        Int?
  notification       Notification[]
  category           Category[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Bill {
  id          Int        @id @default(autoincrement())
  title       String
  amount      Float
  paid        Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  dueDate     DateTime
  paidDate    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  file        File[]
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  userGroup   UserGroup? @relation(fields: [userGroupId], references: [id])
  userGroupId Int?
}

model BaseCategory {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  bill      Bill[]
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  bill      Bill     @relation(fields: [billId], references: [id])
  billId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        Int        @id @default(autoincrement())
  title     String
  message   String
  read      Boolean    @default(false)
  deleted   Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  group     UserGroup? @relation(fields: [groupId], references: [id])
  groupId   Int?
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
}
